{% extends "base.html.twig" %}

{% block title %}Report{% endblock %}

{% block body %}
    <main>
        <div class="two-col-layout">
            <div class="col1">
                <h1>Report</h1>
                <h2 id="kmom01">Kmom01</h2>
                <p>I kursmoment 1 har vi skapat en me-sida till kursen. Vi har bekantat oss med
                PHP-ramverket Symfony och skapat en kodbas för en hemsida med MVC i fokus.
                MVC står för Model-View-Controller, som är en utvecklingsmodell inom webb.
                Tanken är att man separerar applikationen i tre olika delar, där Model står
                för applikationens data och logik, View står för att visa upp den datan, och
                Controller står som en mellanhand d.v.s. att den ska uppdatera eller interagera
                med Model och View enligt inputs från användaren.</p>
                <p>Jag började med att installera den labbmiljö som behövs för kursen. PHP hade
                jag installerat sedan innan, men det jag behövde installera var Composer och Make.
                Composer är en pakethanterare som jag installerade via kommandotolken i WSL och
                när jag var klar var jag redo att installera Symfony med Composer. Med Composers
                kommandon skapade jag ett Symfony projektskelett och även själva webbapplikationen.
                Nu kunde jag börja implementera kraven, och jag kunde testa min hemsida med hjälp
                av PHPs inbyggda server.</p>
                <p>Från installationen av Symfonys projektskal hade jag nu en katalogstruktur att
                jobba med. Under Controller började jag med att lägga in en PHP-fil som skulle
                agera som controller, jag döpte den till MeControllerTwig och i den klassen lade
                jag till de routes som sidan skulle innehålla. Dessa routes skulle länka till
                vyerna som ligger under templates-katalogen. Vyerna skapade jag med en template
                engine Twig som jag först behövde installera med composer. Då kunde jag ha en fil
                som bas, som alla andra filer blev extensions på.</p>
                <p>Jag är bekantad med objektorienterad programmering sedan innan, med Python
                som språk. Klasser och objekt är väldigt lika i både Python och PHP. Klassen
                är uppbyggd av dess medlemsvariabler, och dess metoder som är funktioner man
                kan kalla på hos ett instansierat objekt som är av den klassen. Man kan även
                skapa en konstruktormetod som kallas när ett nytt objekt instansieras, då
                kan man specifiera vad objektet ska innehålla när man skapar det.</p>
                <p>Kodbasen i me/report har blivit välstrukturerad med Symfony och jag ser verkligen
                användbarheten av ramverk. Man separerar koden med principen MVC och den blir
                genast mer lätt att läsa, utveckla och debugga.</p>
                <p>I artikeln "PHP The Right Way" blev jag extra dragen till delen om databasintegrering.
                Jag kände att det var nyttigt att ta till mig det då artikeln tar upp MVC på ett
                konkret sätt genom att ta databas som exempel. De tar upp vikten i att separera
                logiken bakom och presentationen av datan genom att skapa en klass att placera
                en metod för logiken i och på så sätt att skapa en "Model", samt en php fil att visa
                upp datan i för att skapa en "View". De tar även upp att det blir lättare att skapa
                enhetstester för applikationen.</p>
                <p>Idag har jag lärt mig hur man sätter upp en webbapplikation med Symfony som ramverk.
                Med Symfony har jag lärt mig att sätta upp Controller med routes till olika Views, och
                jag har nuddat vid att implementera JavaScript och visa upp JSON-objekt med Symfonys
                inbyggda JsonResponse. Jag har även lärt mig mer om utvecklingsmodellen MVC, och hur man
                använder den för att skapa kod som är lätt att testa och jobba med. Jag har också lärt
                mig mer om objektorienterad programmering inom PHP.</p>

                <h2 id="kmom02">Kmom02</h2>

                <h2 id="kmom03">Kmom03</h2>

                <h2 id="kmom04">Kmom04</h2>

                <h2 id="kmom05">Kmom05</h2>

                <h2 id="kmom06">Kmom06</h2>

                <h2 id="kmom07">Kmom07</h2>

                <h2 id="kmom10">Kmom10</h2>
            </div>
            <div class="col2">
                <ul>
                    <li><a href="#kmom01">Kmom01</a></li>
                    <li><a href="#kmom02">Kmom02</a></li>
                    <li><a href="#kmom04">Kmom03</a></li>
                    <li><a href="#kmom04">Kmom04</a></li>
                    <li><a href="#kmom05">Kmom05</a></li>
                    <li><a href="#kmom06">Kmom06</a></li>
                    <li><a href="#kmom07">Kmom07</a></li>
                    <li><a href="#kmom10">Kmom10</a></li>
                </ul>
            </div>
        </div>
    </main>
{% endblock %}